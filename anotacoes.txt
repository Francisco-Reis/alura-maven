======= MAVEN =======
Gerenciador de build e dependencias

Instalar: http://maven.apache.org/download.cgi

Colocar no PATH (linux):
Editar o arquivo .bashrc e colocar a seguinte linha no final:
export PATH=$PATH:/path/to/directory
Fazer a modificacao funcionar imediatamente, com o comando:
> source ~/.bashrc
Vericicar se funcionou:
> echo $PATH

Versao do Maven:
> mvn -version

Gerar projeto padrao no Maven (Nome: produtos):
mvn archetype:generate -DgroupId=br.com.caelum.maven -DartifactId=produtos -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

Gerar o pacote:
> mvn package

Teste unitario (no diretorio do pom.xml):
> mvn test (teste feito com junit)

Executar a app:
> java -cp target/produtos-1.0-SNAPSHOT.jar br.com.caelum.maven.App

Preparar projeto p/ eclipse:
> mvn eclipse:eclipse

Importar projeto no Eclipse:
Import... -> Existing project into workspace

Add a Calsspath Variable M2_REPO se nao existir:
Window->Preferences->Classpath Variables
Valor: /home/francisco/.m2/repository

Repositorio padrao Maven: <home>/.m2/repository

Compilar via linha de comando:
> mvn compile

ANT: gerencia build
IVY: gerencia dependencias
MAVEN: build e dependencias

Alternativas ao MAVEN:
GANT, GRADLE, RAKE, RAVEN, BUILDR

Biblioteca de dependencias MAVEN:
mvnrepository.com
Repositorio cental do maven:
mirrors.ibiblio.org/maven2/

Usar os comandos MAVEN offline: mvn -o comando (mais rapido, nao busca na internet)

Plugin Relatorio de Testes: mvn surefire-report:report
Gera um html em target/site/surefire-report.html

PMD: Busca pequenos defeitos no código e gera relatorio
mvn pmd:pmd
Local do relatório: target/site/pmd.html

JACOCO:
Testa automacicamente e gera relatorio de codigo coberto por testes
Possui diversas opcoes, incluindo porcentagem de cofigo coberto.
Deve-se alterar o arquivo 'pom.xml' para configura-lo. Ex (apos dependencies):
<build>
		<plugins>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.7.2.201409121644</version>
				<executions>
					<execution>
						<id>prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
					<execution>
						<id>check</id>
						<goals>
							<goal>check</goal>
						</goals>
						<configuration>
							<rules>
								<rule>
									<element>CLASS</element>
									<limits>
										<limit>
											<counter>CLASS</counter>
											<value>COVEREDRATIO</value>
											<minimum>1.0</minimum>
										</limit>
										<limit>
											<counter>INSTRUCTION</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.9</minimum>
										</limit>
										<limit>
											<counter>METHOD</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.95</minimum>
										</limit>
										<limit>
											<counter>BRANCH</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.85</minimum>
										</limit>
										<limit>
											<counter>COMPLEXITY</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.85</minimum>
										</limit>
										<limit>
											<counter>LINE</counter>
											<value>COVEREDRATIO</value>
											<minimum>0.9</minimum>
										</limit>
									</limits>
								</rule>
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
Depois rodar:
mvn package
mvn verify

MINI-TUTORIAL WEBAPP COM MAVEN:
As instrocoes abaixo criam e configuram o WebApp 'produtos-web':
> mvn archetype:generate -DgroupId=br.com.caelum.maven -DartifactId=produtos-web -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
> mkdir src/main/java
> mvn eclipse:eclipse -Dwtpversion=2.0
> rm src/main/webapp/index.jsp
No eclipse, no projeto -> Properties -> Project Facets -> Ajeitar a versao do java
